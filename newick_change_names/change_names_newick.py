import sys
import os
from xlrd import open_workbook

"""
replace names inside newick tree(generated by MEGA) with data that is provided inside *.xls document
*.xls document has two columns: first: have long fasta name(the original ones)
                                second: have "more human" name

Please make sure, that your sequences does not have ",", ":", "(", ")", "'" characters inside names
"""

if len(sys.argv) == 3:
    #open newick tree
    try: 
        nwk_file = open(sys.argv[1])
    except IOError:
        print 'cannot open: ', sys.argv[1]
        sys.exit(1)
    #open xls document
    try:
        book = open_workbook(sys.argv[2])
        sheet = book.sheet_by_index(0)
    except IOError:
        print "Can not open old.xls, nothing to copy from!"
        sys.exit(1)

else:
    print "Please use this script: python " + sys.argv[0] + " *.nwk *.xls"
    sys.exit(1)

# preparing hashmap with xls data
mymap = {}
print "Writing map keys"
for i in range(sheet.nrows):
    data =  sheet.cell_value(i,0)
    #">gi|496457073|ref|WP_009165918.1| alpha-amylase [Pyramidobacter piscolens]" -> ">gi|496457073|ref|WP_009165918.1| alpha-amylase "
    if data.find("[") > 0:
        data = data[:data.find("[")]
    new_data = data.replace(" ", "_")
    #">gi|496457073|ref|WP_009165918.1| alpha-amylase " -> ">gi|496457073|ref|WP_009165918.1|_alpha-amylase_"
    new_data = new_data.replace("=", "_") # Mega replces "=" to "_"
    #">gi|496457073|ref|WP_009165918.1|_alpha-amylase_" -> "gi|496457073|ref|WP_009165918.1|_alpha-amylase"
    mymap[new_data[1:-1]] = sheet.cell_value(i,1)[:-1]
    print new_data[1:-1]
print "End of map keys*******************************"

# open new newick tree file
new_nwk_file = open("new_" + sys.argv[1][:-4] + ".nwk", "w")

# for reading branch length: format: *.???????? or *,????????
read_number = False
read_number_before_dot = False
read_number_after_dot_counter = 8
read_number_after_dot = False

name_str = ""
name_str_cond = False

for nwk_line in nwk_file:
    for nwk_char in nwk_line:
        #reading branch lenghth, it is nasty job :/
        if read_number:
            # !!! some times Mega gives brach lengths separeated with "," instead of "."
            if nwk_char == ".":
                new_nwk_file.write(".")
                read_number_before_dot = False
                read_number_after_dot = True
                continue
            elif read_number_before_dot:
                new_nwk_file.write(nwk_char)
                continue
            elif read_number_after_dot:
                new_nwk_file.write(nwk_char)
                read_number_after_dot_counter -= 1
                if read_number_after_dot_counter == 0:
                    read_number_after_dot = False
                    read_number = False
                    read_number_after_dot_counter = 8
                continue
            else:
                print "This should not happen, something wrong with parsing number"
                sys.exit(1)
        elif nwk_char == ":":
            #after ":" we have number
            read_number = True
            read_number_before_dot = True
            #before ":" we have name sequance
            if name_str_cond:
                # i am not full trust in my dictionary keys
                if name_str in mymap:
                    #sometimes Mega does not write "_" instead of " "
                    new_nwk_file.write(mymap[name_str.replace(" ", "_")])
                    print mymap[name_str] #<----brisi!
                else:
                    print "Something is wrong with dictionary key:", name_str.replace(" ", "_")
                    nwk_file.close()
                    new_nwk_file.close()
                    os.remove("new_" + sys.argv[1][:-4] + ".nwk")
                    sys.exit(1)
                name_str_cond = False
                name_str = ""
            new_nwk_file.write(":")

        # more or less standard things for newrick tree
        elif nwk_char == "(":
            new_nwk_file.write("(")
        elif nwk_char == ")":
            new_nwk_file.write(")")
        elif nwk_char == ",":
            new_nwk_file.write(",")
        elif nwk_char == ";":
            new_nwk_file.write(";")
        elif nwk_char == "\n" or nwk_char == "\r":
            continue

        #we are cathing sequence name
        else:
            if not name_str_cond:
                name_str_cond = True
            name_str += nwk_char

# finishing up
nwk_file.close()
new_nwk_file.close()
# for some reason you can not close sheet file
print "Done"
